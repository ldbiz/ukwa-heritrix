#!/bin/bash

# Set default job name:
export JOB_NAME=${JOB_NAME-frequent}
echo "JOB_NAME is set to ${JOB_NAME}..."

# Enable logging to Monitrix (ELK):
if [ "$MONITRIX_ENABLED" = "true" ]; then
    echo STARTER: Attempting to send logs to Monitrix
    filebeat -v -e -c /etc/filebeat/filebeat.yml & 
else
	echo STARTER: Monitrix crawl logging disabled
fi

# Ensure the scope file exists, if it's an absolute path:
if [[ "${SURTS_SOURCE_FILE:0:1}" == / ]]; then
    echo Touching $SURTS_SOURCE_FILE...
    touch $SURTS_SOURCE_FILE
fi

#
# Trapping the TERM signal and shutting down cleanly only works
# if we use `wait` to await H3 rather than running it in the 
# foreground.
#

# Define a function to attempt a clean shutdown:
stop_heritrix() {
    echo Attempting to shut-down Heritrix...
    /h3-bin/bin/job-stop
    #kill -TERM $PID
}
# Register as a SIGTERM handler:
trap 'stop_heritrix' INT TERM

# Fire up Heritrix and track it's logs:
/h3-bin/bin/heritrix -a $HERITRIX_USER:$HERITRIX_PASSWORD -b 0.0.0.0 -j /jobs &
# not supported properly: "-r ${JOB_NAME}", hence delayed curl-based launcher used below:
PID=$!

# Launch the job if configured to do so:
if [ "$LAUNCH_AUTOMATICALLY" = "true" ]; then
    echo STARTER: Waiting while Heritrix starts up...
    sleep 45
    echo STARTER: Launching job ${JOB_NAME}...
    /h3-bin/bin/job-launch
fi
# Alternatively, resume:
if [ "$LAUNCH_AUTOMATICALLY" = "resume" ]; then
    echo STARTER: Waiting while Heritrix starts up...
    sleep 45
    echo STARTER: Resuming job ${JOB_NAME}...
    /h3-bin/bin/job-resume
fi

echo Waiting for Heritrix PID ${PID}...
wait $PID

# Wait again, following interrupt, but clearing the signal trap...
trap - INT TERM
echo Waiting for Heritrix PID ${PID} a second time...
wait $PID
EXIT_STATUS=$?
